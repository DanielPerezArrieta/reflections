When would you want to use a remote repository rather than keeping all your work local?

When a project is accomplished by a Team or when I intendedly want to share it, for any reason, publicly.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

As to my sense of use of sharing a project, I'd rather prefer to control the fetching process.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Branches are git resources/implementation of pointers to commits. Clone is a copy of any repository to a local machine and fork, similar to clone, underlies the clone principle but emphasizes a copy in github (remote sharable repository)

What is the benefit of having a copy of the last known state of the remote stored locally?

As far as I could understand on having locally remote state (fetching), the benefit would be to look on the differences before merging. Being able to anticipate undesired changes/behaviour and branch them out to play with them.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Of course if a team must work on a project and has no way to work with git and github, other revision control software should be provided for the sake of success. I see it impossible to work with a team of 10 people not having any versioning software. Easier would be separate functionality which has no common files relationships. Harder way would be to collaborate on a bunch of common files.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

To isolate production from testing purposes. Making changes directly in master branch lets avoid merging conflicts and eases the process but, still, it does not isolates production from arising bugs due to functionality that could not be tested in advanced.
