What happens when you initialize a repository? Why do you need to do it?

It creates a folder .git containing hash data for revision control of tracked files. We need to do it in order to initialize the repo.

How is the staging area different from the working directory and the repository? What value do you think it offers?

Staging area holds files which we want to keep track and repository holds history of commits about these files changes.

How can you use the staging area to make sure you have one commit per logical change?

By applying git diff --staged

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Adding new features, solving a bug or testing experimental behaviors. They will separate the actual behavior to the changes made for these purposes. So nothing will be changes for the current behaviour.

How do the diagrams help you visualize the branch structure?

Avoiding unreachable commits

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The current branch and the branches that have been merged are ordered by date of commit (not parent) and reflected in the checkout branched. git log --graph --oneline <branches>


What are the pros and cons of Git’s automatic merging vs. always doing merges manually?


Pros: good approach for simplicity and swiftness Cons: Not always enough machine learning to avoiding conflicts. 

